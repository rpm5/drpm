IF (RPM5)
    MESSAGE (STATUS "Enabling RPM 5 support")
    ADD_DEFINITIONS (-DRPM5)
    FIND_PACKAGE (PkgConfig REQUIRED)
    PKG_CHECK_MODULES (RPM REQUIRED rpm)
    INCLUDE_DIRECTORIES (${RPM_INCLUDE_DIRS})
ENDIF (RPM5)

set(DRPM_VERSION_MAJOR 0)
set(DRPM_VERSION_MINOR 2)
set(DRPM_VERSION_PATCH 0)

set(DRPM_VERSION ${DRPM_VERSION_MAJOR}.${DRPM_VERSION_MINOR}.${DRPM_VERSION_PATCH})
set(DRPM_SOVERSION ${DRPM_VERSION_MAJOR})

set(CMAKE_BUILD_TYPE RelWithDebInfo)

if (NOT ${CMAKE_SIZEOF_VOID_P} EQUAL 8)
   set(ARCH_LESS_64BIT 1)
endif()

configure_file(config.h.in ${CMAKE_BINARY_DIR}/config.h)

add_library(drpm STATIC ${DRPM_SOURCES})
ADD_SANITIZERS(drpm)

IF (RPM5)
set_source_files_properties(${DRPM_SOURCES} PROPERTIES
   COMPILE_FLAGS "-std=c99 -Wall -Wextra -Wno-unused-parameter -Wno-unused-function -DHAVE_CONFIG_H -I${CMAKE_BINARY_DIR}"
)
ELSE (RPM5)
set_source_files_properties(${DRPM_SOURCES} PROPERTIES
   COMPILE_FLAGS "-std=c99 -pedantic -Wall -Wextra -DHAVE_CONFIG_H -I${CMAKE_BINARY_DIR}"
)
ENDIF (RPM5)

target_link_libraries(drpm ${DRPM_LINK_LIBRARIES})

set_target_properties(drpm PROPERTIES
   VERSION ${DRPM_VERSION}
   SOVERSION ${DRPM_SOVERSION}
)

install(TARGETS drpm DESTINATION ${LIB_INSTALL_DIR})
install(FILES drpm.h DESTINATION ${INCLUDE_INSTALL_DIR})
